{"version":3,"sources":["components/Header.js","components/Main.js","components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onSubmit","searchMovie","value","onChange","handleChange","type","placeholder","Main","movie","style","src","Poster","alt","to","imdbID","Title","Released","Movie","Genre","Director","Actors","target","href","Website","App","evt","setState","preventDefault","a","fetch","state","response","json","data","Response","alert","getMovie","exact","path","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAceA,MAXf,SAAgBC,GACd,OACE,yBAAKC,UAAU,UACb,0BAAMA,UAAU,OAAOC,SAAUF,EAAMG,aACrC,2BAAOC,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMM,aAAcL,UAAU,qCAAqCM,KAAK,OAAOC,YAAY,iBAChI,4BAAQP,UAAU,iBAAlB,a,OCkBOQ,MApBf,SAAcT,GACZ,OAAoB,OAAhBA,EAAMU,MAEN,yBAAKT,UAAU,QACb,yBAAKA,UAAU,OAAOU,MAAO,CAAC,MAAS,UACrC,yBAAKV,UAAU,eAAeW,IAAKZ,EAAMU,MAAMG,OAAQC,IAAI,iBAC3D,yBAAKb,UAAU,aACb,kBAAC,IAAD,CAAMc,GAAE,iBAAYf,EAAMU,MAAMM,QAAUf,UAAU,8BAApD,UAAyFD,EAAMU,MAAMO,OACrG,uBAAGhB,UAAU,aAAb,aAAoCD,EAAMU,MAAMQ,aAOtD,+BCKSC,MApBf,SAAenB,GAGb,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,OAAOU,MAAO,CAAC,MAAS,UACrC,yBAAKV,UAAU,eAAeW,IAAKZ,EAAMU,MAAMG,OAAQC,IAAI,iBAC3D,yBAAKb,UAAU,aACb,wBAAIc,GAAE,WAAMf,EAAMU,MAAMM,QAAUf,UAAU,cAA5C,UAAiED,EAAMU,MAAMO,OAC7E,uBAAGhB,UAAU,aAAb,aAAoCD,EAAMU,MAAMQ,UAChD,uBAAGjB,UAAU,aAAb,UAAiCD,EAAMU,MAAMU,OAC7C,uBAAGnB,UAAU,aAAb,aAAoCD,EAAMU,MAAMW,UAChD,uBAAGpB,UAAU,aAAb,WAAkCD,EAAMU,MAAMY,QAC9C,uBAAGC,OAAO,SAASC,KAAMxB,EAAMU,MAAMe,QAASxB,UAAU,aAAxD,e,OCmDKyB,G,kBA1Db,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KAQRM,aAAe,SAACqB,GACd,EAAKC,SAAS,CACZxB,MAAOuB,EAAIJ,OAAOnB,SAXH,EAenBD,YAAc,SAACwB,GACbA,EAAIE,iBAEU,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,6BAAD,OAA8B,EAAKC,MAAM5B,MAAzC,qBADb,cACT6B,EADS,gBAGIA,EAASC,OAHb,OAKO,UAFhBC,EAHS,QAKNC,SACP,EAAKR,UAAS,SAAAI,GAAK,MAAK,CACtBtB,MAAOyB,MAGTE,MAAM,oBAVO,2CAAH,oDAcdC,GAEA,EAAKV,SAAS,CACZxB,MAAO,MAhCT,EAAK4B,MAAQ,CACX5B,MAAO,GACPM,MAAO,MALQ,E,sEAwCjB,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAQpC,MAAOqC,KAAKT,MAAM5B,MAAOD,YAAasC,KAAKtC,YAAaG,aAAcmC,KAAKnC,eACnF,kBAAC,EAAD,CAAMI,MAAO+B,KAAKT,MAAMtB,SAEH,OAArB+B,KAAKT,MAAMtB,OACX,kBAAC,IAAD,CAAO8B,KAAK,cACV,kBAAC,EAAD,CAAO9B,MAAO+B,KAAKT,MAAMtB,e,GAlDrBgC,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3f5f83cc.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nfunction Header(props) {\n  return (\n    <div className=\"Header\">\n      <form className=\"form\" onSubmit={props.searchMovie}>\n        <input value={props.value} onChange={props.handleChange} className=\"form-control form-control-lg field\" type=\"text\" placeholder=\"search movie\" />\n        <button className=\"btn btn-light\">Search</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react';\nimport {\n  Link\n} from \"react-router-dom\"\nimport '../App.css';\n\nfunction Main(props) {\n  if (props.movie !== null) {\n    return (\n      <div className=\"Main\">\n        <div className=\"card\" style={{'width': '18rem'}}>\n          <img className=\"card-img-top\" src={props.movie.Poster} alt=\"Movie poster\" />\n          <div className=\"card-body\">\n            <Link to={`/movie/${props.movie.imdbID}`} className=\"card-title card-title-link\">Title: {props.movie.Title}</Link>\n            <p className=\"card-text\">Released: {props.movie.Released}</p>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div></div>\n    )\n  }\n}\n\nexport default Main","import React from 'react';\n// import {\n//   useParams\n// } from \"react-router-dom\";\nimport '../App.css';\n\nfunction Movie(props) {\n  // let { id } = useParams();\n\n  return (\n    <div className=\"Movie\">\n      <div className=\"card\" style={{'width': '18rem'}}>\n        <img className=\"card-img-top\" src={props.movie.Poster} alt=\"Movie poster\" />\n        <div className=\"card-body\">\n          <h5 to={`/${props.movie.imdbID}`} className=\"card-title\">Title: {props.movie.Title}</h5>\n          <p className=\"card-text\">Released: {props.movie.Released}</p>\n          <p className=\"card-text\">Genre: {props.movie.Genre}</p>\n          <p className=\"card-text\">Director: {props.movie.Director}</p>\n          <p className=\"card-text\">Actors: {props.movie.Actors}</p>\n          <a target=\"_blank\" href={props.movie.Website} className=\"card-link\">Website</a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Movie","import React from 'react';\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Movie from './components/Movie'\nimport {\n  Route,\n  HashRouter\n} from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      movie: null\n    }\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      value: evt.target.value\n    })\n  };\n\n  searchMovie = (evt) => {\n    evt.preventDefault();\n\n    const getMovie = async () => {\n      const response = await fetch(`http://www.omdbapi.com/?t=${this.state.value}&apikey=51b5804a`);\n\n      const data = await response.json();\n\n      if (data.Response === 'True') {\n        this.setState(state => ({\n          movie: data\n        }))\n      } else {\n        alert('Movie not found!')\n      }\n    };\n\n    getMovie();\n\n    this.setState({\n      value: ''\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Route exact path=\"/\">\n            <Header value={this.state.value} searchMovie={this.searchMovie} handleChange={this.handleChange} />\n            <Main movie={this.state.movie} />\n          </Route>\n          { this.state.movie !== null &&\n            <Route path=\"/movie/:id\">\n              <Movie movie={this.state.movie} />\n            </Route>\n          }\n        </HashRouter>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}